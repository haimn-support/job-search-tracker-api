version: '3.8'

# Production Docker Compose configuration
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

services:
  db:
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-interview_tracker}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    ports: []  # Remove port exposure in production
    restart: always

  redis:
    ports: []  # Remove port exposure in production
    restart: always
    volumes:
      - redis_data_prod:/data

  api:
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-interview_tracker}
      SECRET_KEY: ${SECRET_KEY}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      ENVIRONMENT: production
      DEBUG: "false"
      TESTING: "false"
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS}
      LOG_LEVEL: ${LOG_LEVEL:-WARNING}
    ports:
      - "${API_PORT:-8000}:8000"
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  migrate:
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-interview_tracker}

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: interview_tracker_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    restart: always
    networks:
      - interview_tracker_network

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local