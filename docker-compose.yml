version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: interview_tracker_db
    environment:
      POSTGRES_DB: interview_tracker
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d interview_tracker"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - interview_tracker_network

  # Redis (for future caching/session management)
  redis:
    image: redis:7-alpine
    container_name: interview_tracker_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - interview_tracker_network

  # API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: interview_tracker_api
    environment:
      # Database configuration
      DATABASE_URL: postgresql://postgres:postgres@db:5432/interview_tracker
      
      # Application configuration
      SECRET_KEY: your-super-secret-key-change-in-production
      ACCESS_TOKEN_EXPIRE_MINUTES: 60
      ALGORITHM: HS256
      
      # Environment
      ENVIRONMENT: development
      DEBUG: "false"
      TESTING: "false"
      
      # CORS
      BACKEND_CORS_ORIGINS: '["http://localhost:3000", "http://localhost:8080"]'
      
      # Logging
      LOG_LEVEL: INFO
      
      # Health check
      HEALTH_CHECK_ENABLED: "true"
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - interview_tracker_network
    volumes:
      # Mount logs directory for log persistence
      - ./logs:/app/logs

  # Database Migration Service (runs once)
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: interview_tracker_migrate
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/interview_tracker
    depends_on:
      db:
        condition: service_healthy
    command: ["alembic", "upgrade", "head"]
    networks:
      - interview_tracker_network
    restart: "no"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  interview_tracker_network:
    driver: bridge